const express = require("express");
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const cors = require("cors");

// ุฅูุดุงุก ุงูุชุทุจูู
const app = express();
app.use(express.json()); // ููุณูุงุญ ุจูุฑุงุกุฉ JSON
app.use(cors()); // ููุณูุงุญ ุจุงูุทูุจุงุช ูู ุงููุฑููุช

// ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
mongoose.connect("mongodb://localhost:27017/mydatabase", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log("โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช"))
.catch((error) => console.error("โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:", error));

// ุฅูุดุงุก ูููุฐุฌ ุงููุณุชุฎุฏู
const UserSchema = new mongoose.Schema({
    username: String,
    email: String,
    password: String
});

const User = mongoose.model("User", UserSchema);

// โ ุชุณุฌูู ูุณุชุฎุฏู ุฌุฏูุฏ
app.post("/signup", async (req, res) => {
    try {
        const { username, email, password } = req.body;

        if (!username || !email || !password) {
            return res.status(400).json({ message: "โ ูุฑุฌู ููุก ุฌููุน ุงูุญููู" });
        }

        // ุชุดููุฑ ูููุฉ ุงููุฑูุฑ
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        const newUser = new User({ username, email, password: hashedPassword });

        await newUser.save();
        res.status(201).json({ message: "โ ุชู ุชุณุฌูู ุงููุณุชุฎุฏู ุจูุฌุงุญ", user: newUser });
    } catch (error) {
        res.status(500).json({ message: "โ ุญุฏุซ ุฎุทุฃ ูู ุงูุณูุฑูุฑ", error });
    }
});

// โ ุชุณุฌูู ุงูุฏุฎูู ูุฅูุดุงุก ุงูุชููู
app.post("/login", async (req, res) => {
    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({ message: "โ ูุฑุฌู ููุก ุฌููุน ุงูุญููู" });
        }

        // ุงูุจุญุซ ุนู ุงููุณุชุฎุฏู
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: "โ ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ" });
        }

        // ุงูุชุญูู ูู ูููุฉ ุงููุฑูุฑ
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: "โ ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ" });
        }

        // ุฅูุดุงุก ุงูุชููู
        const token = jwt.sign({ userId: user._id }, "secretKey", { expiresIn: "1h" });

        res.status(200).json({ message: "โ ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ", token });
    } catch (error) {
        res.status(500).json({ message: "โ ุญุฏุซ ุฎุทุฃ ูู ุงูุณูุฑูุฑ", error });
    }
});

// โ ุงููุตูู ููุตูุญุฉ ุงูุดุฎุตูุฉ (ูุญุชุงุฌ ุฅูู ุชููู)
app.get("/profile", async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];

        if (!token) {
            return res.status(401).json({ message: "โ ุบูุฑ ูุตุฑุญ ูู ุจุงููุตูู" });
        }

        const decoded = jwt.verify(token, "secretKey");

        const user = await User.findById(decoded.userId).select("-password");

        if (!user) {
            return res.status(404).json({ message: "โ ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ" });
        }

        res.status(200).json({ message: "โ ุชู ุฌูุจ ุจูุงูุงุช ุงููุณุชุฎุฏู", user });
    } catch (error) {
        res.status(500).json({ message: "โ ุญุฏุซ ุฎุทุฃ ูู ุงูุณูุฑูุฑ", error });
    }
});

// โ ุชุดุบูู ุงูุณูุฑูุฑ
const PORT = 5000;
app.listen(PORT, () => console.log(`๐ ุงูุณูุฑูุฑ ูุนูู ุนูู http://localhost:${PORT}`));
